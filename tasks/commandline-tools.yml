- name: software from native sources
  ansible.builtin.apt:
    update_cache: true
    install_recommends: true
    pkg:
    - tmux
    - fonts-powerline   # starship requirement
    - fonts-firacode    # starship requirement

- name: install starship
  block:
    - ansible.builtin.set_fact:
        github_repository: "starship/starship"
        github_package_name: "starship-x86_64-unknown-linux-gnu.tar.gz"

    - name: "{{ github_repository }} - query github api content for latest release"
      ansible.builtin.uri:
        url: "{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_api_path}}/repos/{{ github_repository }}/releases/latest"
        validate_certs: false
        return_content: true
      register: api

    - name: "{{ github_repository }} - convert api content to json"
      ansible.builtin.set_fact:
        api_json: "{{ api.content | from_json }}"

    - name: "{{ github_repository }} - installing {{ github_package_name }}:latest" 
      loop: "{{ api_json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.unarchive:
        src: '{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_path}}{{ item.browser_download_url | urlsplit("path") }}'
        dest: /usr/local/bin
        remote_src: yes
      when: github_package_name == item.name

- name: install helix editor
  block:
    - name: helix-editor - deploy ppa gpg key  
      ansible.builtin.blockinfile:
        path: /etc/apt/trusted.gpg.d/ppa-helix.asc
        create: true
        block: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----
          Comment: Hostname: 
          Version: Hockeypuck 2.1.1-10-gec3b0e7
          
          xsFNBGO12s8BEACXL6xcHDOpwPgztfaK7ewwCqCf/mUrl0H/qAK5//YozVQPuvpM
          sdQRuvVfjPvp5rqxasQ+/BIyljjC1S4ZlfM6HzWJI4hBd19lO106PUrNX6Wt8Pm1
          2M/XGpIvtzjiy7zutgeB2h2jnjgNTs8z2bA/zUBZ8G7y106HAegCt8dbS27xJNJz
          lR8BVEUNSmZtuCNwC0LDTuLV12zFRrvXrf4rxLIu4cdtpYsnFRLQLRlAq/VNK3RI
          C62dDkDC9DRRgtYSeGTl7UBlg2AtuUIYxWO9US8XZHaz7qzUckLuViF7R1bGsInG
          2ldb3LCw4lho8vpEujY/1ZjAB5L1poGQK4yv1YkHMoyzs4asAiEIT94EDRcv2wka
          scmjXIjqiHcu6VnYrTw0ZPmOTHjeKW+yYi2Mzk032BKCm5gIyejSSEQ08OYvd7or
          FG3GTN2LcWTMSF1afSKw4UeYuHvAIPmOgU0+QkZmf+2g0fzcBdE7nbGK2PELL01f
          ugutJpxMn7a0jyPO5goibhh4PQsHAATgYgRL5n3MAtiULN5fnNqtonSSUHrRqBjd
          CWat4atyxxNtd+TVgOCTaXVmWl3O9kVmsBxu6dwTwKVtjdgBknWmass5DaBjoO4C
          BNVbAOj8I1wYBRz8LHUbM3d2Pooj20rm9SF4MU0Uar25EfD2EglpNIdrZQARAQAB
          zSBMYXVuY2hwYWQgUFBBIGZvciBGYWJpYW4gTWV0dGxlcsLBjgQTAQoAOBYhBCdk
          K5/X8aFh/CUk4zVaT6UV18hVBQJjtdrPAhsDBQsJCAcCBhUKCQgLAgQWAgMBAh4B
          AheAAAoJEDVaT6UV18hVwwYP/3yFJeNpve2qqYi3NhdSS8Fr5i8yujMCoKJRZzBT
          RkeS/Zl2uSkM8nOFuWD9eCsNYcPqkmWm6x3uGl/v/gHC3fZ8O3MOdXskMa/4mTtJ
          XwgqKiwGZw/5/FbxSaGpdszgSwYreioMAgAB9c9kPsGPpkDgM9dhocqxFg2AK9Cy
          vQcJcXQcbkl/0XLKc3oJA5g2DZmLNwtCF4QtkKMTpy+g2XdKCTbiHRjfO+TAeW0l
          IW+e3W9fUnzRHwJGvK2MicxHZYLxER0nBuwbnwR22numDNJaJiFZQErLNPWDeTJO
          SLrB2GmBkxDmARnSaPGUpnrqYhfW5msLFeIQjFbP+KLrNMXY48uF5TGcpuzjMHCk
          ULWa9cM2kUNcD3XP2AHRkauqfXIf0ptRwLo90ehHjeT/RTTekTLOeTsIGOReQMOV
          JJ+gy1LnRjutyWXhKalPfNPX+YcnlT87TiELKM0XTrGnUoheK15zlMNVtgr/Wq2Y
          cDfSa7UGqwoCOzoCMJ3zej5LmWKEZoRvb/KmeoM8Tap2L5KADBocU/j0qqZ526wY
          rg7qi10jvJiZn3PYkcQlTjIt99+fEHgt/hUwAZA+xpjU6drfCtVh2ANqqqvLZFp9
          UTtwm/jx+drxHcTA8Q2R4KTuvfkt+sQbwAj6ndBOb6ESAvX5IqwhoHAQ8qEiXtnM
          DUJ7
          =ujw+
          -----END PGP PUBLIC KEY BLOCK-----
        mode: 644

    - name: helix-editor - create ppa repository definition
      ansible.builtin.lineinfile:
        path: /etc/save/apt/sources.list.d/ppa-helix.list
        search_string: 'deb'
        line: 'deb http://ubuntu-proxy:8081/repository/ubuntu-jammy-ppa-helix jammy main'
        create: true

    - name: helix-editor - install native tools
      ansible.builtin.apt:
        update_cache: true
        install_recommends: true
        state: latest
        pkg:
          - helix

    - name: helix-editor - cleanup
      ansible.builtin.apt:
        autoremove: true
        autoclean: true

- name: install lazygit
  block:
    - ansible.builtin.set_fact:
        github_repository: "jesseduffield/lazygit"
        github_package_name: "Linux_x86_64.tar.gz"
    
    - name: "{{ github_repository }} - query github api content for latest release"
      ansible.builtin.uri:
        url: "{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_api_path}}/repos/{{ github_repository }}/releases/latest"
        validate_certs: false
        return_content: true
      register: api
    
    - name: "{{ github_repository }} - convert api content to json"
      ansible.builtin.set_fact:
        api_json: "{{ api.content | from_json }}"
    
    - name: "{{ github_repository }} - installing {{ github_package_name }}:latest" 
      loop: "{{ api_json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.unarchive:
        src: '{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_path}}{{ item.browser_download_url | urlsplit("path") }}'
        dest: /usr/local/bin
        remote_src: yes
        extra_opts:
        - 'lazygit'
      when: github_package_name in item.name

- name: install zoxide
  block:
    - ansible.builtin.set_fact:
        github_repository: "ajeetdsouza/zoxide"
        github_package_name: "amd64.deb"
    
    - name: "{{ github_repository }} - query github api content for latest release"
      ansible.builtin.uri:
        url: "{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_api_path}}/repos/{{ github_repository }}/releases/latest"
        validate_certs: false
        return_content: true
      register: api
    
    - name: "{{ github_repository }} - convert api content to json"
      ansible.builtin.set_fact:
        api_json: "{{ api.content | from_json }}"
    
    - name: "{{ github_repository }} - installing {{ github_package_name }}:latest" 
      loop: "{{ api_json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.apt:
        deb: '{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_path}}{{ item.browser_download_url | urlsplit("path") }}'
      when: github_package_name in item.name

- name: install xplr
  block:
    - ansible.builtin.set_fact:
        github_repository: "sayanarijit/xplr"
        github_package_name: "xplr-linux.tar.gz"

    - name: "{{ github_repository }} - query github api content for latest release"
      ansible.builtin.uri:
        url: "{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_api_path}}/repos/{{ github_repository }}/releases/latest"
        validate_certs: false
        return_content: true
      register: api

    - name: "{{ github_repository }} - convert api content to json"
      ansible.builtin.set_fact:
        api_json: "{{ api.content | from_json }}"

    - name: "{{ github_repository }} - installing {{ github_package_name }}:latest" 
      loop: "{{ api_json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.unarchive:
        src: '{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_path}}{{ item.browser_download_url | urlsplit("path") }}'
        dest: /usr/local/bin
        remote_src: yes
      when: github_package_name == item.name

- name: install cheat
  block:
    - ansible.builtin.set_fact:
        github_repository: "cheat/cheat"
        github_package_name: "cheat-linux-amd64.gz"

    - name: "{{ github_repository }} - query github api content for latest release"
      ansible.builtin.uri:
        url: "{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_api_path}}/repos/{{ github_repository }}/releases/latest"
        validate_certs: false
        return_content: true
      register: api

    - name: "{{ github_repository }} - convert api content to json"
      ansible.builtin.set_fact:
        api_json: "{{ api.content | from_json }}"

    - name: "{{ github_repository }} - downloading {{ github_package_name }}:latest" 
      loop: "{{ api_json.assets }}"
      loop_control:
        label: "{{ item.name }}"
      ansible.builtin.get_url:
        url: '{{github_proxy_proto}}://{{github_proxy_ip}}:{{github_proxy_port}}{{github_proxy_path}}{{ item.browser_download_url | urlsplit("path") }}'
        dest: /tmp
      when: github_package_name == item.name

    - name: "{{ github_repository }} - uncompess archive"
      command: gunzip /tmp/cheat-linux-amd64.gz

    - name: "{{ github_repository }} - rename binary"
      command: "mv /tmp/cheat-linux-amd64 /usr/local/bin/cheat"

    - name: "{{ github_repository }} - correct permissions"
      file:
        path: /usr/local/bin/cheat
        mode: '0755'